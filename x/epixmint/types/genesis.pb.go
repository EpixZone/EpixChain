// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: epixmint/v1/genesis.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the epixmint module's genesis state.
type GenesisState struct {
	// params defines all the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_703b4a855aa1ce6e, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// Params defines the parameters for the epixmint module.
type Params struct {
	// mint_denom is the denomination of the coin to mint.
	MintDenom string `protobuf:"bytes,1,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom,omitempty"`
	// initial_annual_mint_amount is the starting amount of tokens to mint in the first year.
	InitialAnnualMintAmount cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=initial_annual_mint_amount,json=initialAnnualMintAmount,proto3,customtype=cosmossdk.io/math.Int" json:"initial_annual_mint_amount"`
	// annual_reduction_rate is the percentage reduction in minting per year (e.g., 0.25 for 25%).
	AnnualReductionRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=annual_reduction_rate,json=annualReductionRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"annual_reduction_rate"`
	// block_time_seconds is the expected block time in seconds for calculating blocks per year.
	BlockTimeSeconds uint64 `protobuf:"varint,4,opt,name=block_time_seconds,json=blockTimeSeconds,proto3" json:"block_time_seconds,omitempty"`
	// max_supply is the maximum total supply that can ever be minted.
	MaxSupply cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=max_supply,json=maxSupply,proto3,customtype=cosmossdk.io/math.Int" json:"max_supply"`
	// community_pool_rate is the percentage of minted tokens allocated to the community pool.
	CommunityPoolRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=community_pool_rate,json=communityPoolRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"community_pool_rate"`
	// staking_rewards_rate is the percentage of minted tokens allocated to staking rewards.
	StakingRewardsRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=staking_rewards_rate,json=stakingRewardsRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"staking_rewards_rate"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_703b4a855aa1ce6e, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMintDenom() string {
	if m != nil {
		return m.MintDenom
	}
	return ""
}

func (m *Params) GetBlockTimeSeconds() uint64 {
	if m != nil {
		return m.BlockTimeSeconds
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "epixmint.v1.GenesisState")
	proto.RegisterType((*Params)(nil), "epixmint.v1.Params")
}

func init() { proto.RegisterFile("epixmint/v1/genesis.proto", fileDescriptor_703b4a855aa1ce6e) }

var fileDescriptor_703b4a855aa1ce6e = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x31, 0x6f, 0xd3, 0x40,
	0x1c, 0xc5, 0x6d, 0x08, 0x81, 0x5c, 0x19, 0xe0, 0xd2, 0x0a, 0x37, 0x08, 0xa7, 0xea, 0x80, 0x2a,
	0x01, 0xb6, 0x02, 0x1b, 0x13, 0x89, 0x22, 0xa1, 0x22, 0x90, 0x2a, 0x87, 0x89, 0xe5, 0x74, 0x39,
	0x9f, 0x9c, 0x53, 0x7c, 0xf7, 0xb7, 0x7c, 0xe7, 0x10, 0x7f, 0x0b, 0x46, 0xc6, 0x7e, 0x08, 0x3e,
	0x02, 0x43, 0xc7, 0x8a, 0x09, 0x31, 0x54, 0x28, 0x59, 0xf8, 0x18, 0xc8, 0x77, 0x6e, 0x55, 0x89,
	0x89, 0x6e, 0xf6, 0x7b, 0xcf, 0xbf, 0xe7, 0x67, 0x9d, 0xd1, 0x3e, 0x2f, 0xc4, 0x5a, 0x0a, 0x65,
	0xe2, 0xd5, 0x28, 0xce, 0xb8, 0xe2, 0x5a, 0xe8, 0xa8, 0x28, 0xc1, 0x00, 0xde, 0xb9, 0xb4, 0xa2,
	0xd5, 0x68, 0xb0, 0xcf, 0x40, 0x4b, 0xd0, 0xc4, 0x5a, 0xb1, 0xbb, 0x71, 0xb9, 0xc1, 0x6e, 0x06,
	0x19, 0x38, 0xbd, 0xb9, 0x72, 0xea, 0xe1, 0x18, 0xdd, 0x7f, 0xeb, 0x70, 0x33, 0x43, 0x0d, 0xc7,
	0x23, 0xd4, 0x2d, 0x68, 0x49, 0xa5, 0x0e, 0xfc, 0x03, 0xff, 0x68, 0xe7, 0x65, 0x3f, 0xba, 0x86,
	0x8f, 0x4e, 0xac, 0x35, 0xe9, 0x9c, 0x5d, 0x0c, 0xbd, 0xa4, 0x0d, 0x1e, 0x7e, 0xef, 0xa0, 0xae,
	0x33, 0xf0, 0x13, 0x84, 0x9a, 0x28, 0x49, 0xb9, 0x02, 0x69, 0x09, 0xbd, 0xa4, 0xd7, 0x28, 0xd3,
	0x46, 0xc0, 0x0b, 0x34, 0x10, 0x4a, 0x18, 0x41, 0x73, 0x42, 0x95, 0xaa, 0x68, 0x4e, 0x6c, 0x9a,
	0x4a, 0xa8, 0x94, 0x09, 0x6e, 0x35, 0xf1, 0xc9, 0xb3, 0x86, 0xfd, 0xeb, 0x62, 0xb8, 0xe7, 0x5e,
	0x5e, 0xa7, 0xcb, 0x48, 0x40, 0x2c, 0xa9, 0x59, 0x44, 0xc7, 0xca, 0xfc, 0xf8, 0xf6, 0x02, 0xb5,
	0xab, 0x8e, 0x95, 0x49, 0x1e, 0xb5, 0xb8, 0xb1, 0xa5, 0x7d, 0x10, 0xca, 0x8c, 0x2d, 0x0b, 0x73,
	0xb4, 0xd7, 0x36, 0x94, 0x3c, 0xad, 0x98, 0x11, 0xa0, 0x48, 0x49, 0x0d, 0x0f, 0x6e, 0xdb, 0x92,
	0x51, 0x5b, 0xf2, 0xf8, 0xdf, 0x92, 0xf7, 0x3c, 0xa3, 0xac, 0x9e, 0x72, 0x76, 0xad, 0x6a, 0xca,
	0x59, 0xd2, 0x77, 0xbc, 0xe4, 0x12, 0x97, 0x34, 0x5f, 0xeb, 0x39, 0xc2, 0xf3, 0x1c, 0xd8, 0x92,
	0x18, 0x21, 0x39, 0xd1, 0x9c, 0x81, 0x4a, 0x75, 0xd0, 0x39, 0xf0, 0x8f, 0x3a, 0xc9, 0x03, 0xeb,
	0x7c, 0x14, 0x92, 0xcf, 0x9c, 0x8e, 0xdf, 0x21, 0x24, 0xe9, 0x9a, 0xe8, 0xaa, 0x28, 0xf2, 0x3a,
	0xb8, 0xf3, 0xff, 0x73, 0x7b, 0x92, 0xae, 0x67, 0xf6, 0x69, 0x4c, 0x51, 0x9f, 0x81, 0x94, 0x95,
	0x12, 0xa6, 0x26, 0x05, 0x40, 0xee, 0xe6, 0x75, 0x6f, 0x3a, 0xef, 0xe1, 0x15, 0xed, 0x04, 0x20,
	0xb7, 0xe3, 0x18, 0xda, 0xd5, 0x86, 0x2e, 0x85, 0xca, 0x48, 0xc9, 0x3f, 0xd3, 0x32, 0xd5, 0xae,
	0xe3, 0xee, 0x4d, 0x3b, 0x70, 0x8b, 0x4b, 0x1c, 0xad, 0x29, 0x79, 0x7d, 0xef, 0xeb, 0xe9, 0xd0,
	0xfb, 0x73, 0x3a, 0xf4, 0x27, 0x6f, 0xce, 0x36, 0xa1, 0x7f, 0xbe, 0x09, 0xfd, 0xdf, 0x9b, 0xd0,
	0xff, 0xb2, 0x0d, 0xbd, 0xf3, 0x6d, 0xe8, 0xfd, 0xdc, 0x86, 0xde, 0xa7, 0xa7, 0x99, 0x30, 0x8b,
	0x6a, 0x1e, 0x31, 0x90, 0xed, 0x91, 0x8e, 0xf9, 0x4a, 0xc6, 0xeb, 0xf8, 0xea, 0xa7, 0x30, 0x75,
	0xc1, 0xf5, 0xbc, 0x6b, 0x8f, 0xf4, 0xab, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x97, 0x5a, 0x60,
	0x0e, 0x2d, 0x03, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MintDenom != that1.MintDenom {
		return false
	}
	if !this.InitialAnnualMintAmount.Equal(that1.InitialAnnualMintAmount) {
		return false
	}
	if !this.AnnualReductionRate.Equal(that1.AnnualReductionRate) {
		return false
	}
	if this.BlockTimeSeconds != that1.BlockTimeSeconds {
		return false
	}
	if !this.MaxSupply.Equal(that1.MaxSupply) {
		return false
	}
	if !this.CommunityPoolRate.Equal(that1.CommunityPoolRate) {
		return false
	}
	if !this.StakingRewardsRate.Equal(that1.StakingRewardsRate) {
		return false
	}
	return true
}
func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.StakingRewardsRate.Size()
		i -= size
		if _, err := m.StakingRewardsRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.CommunityPoolRate.Size()
		i -= size
		if _, err := m.CommunityPoolRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.MaxSupply.Size()
		i -= size
		if _, err := m.MaxSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.BlockTimeSeconds != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BlockTimeSeconds))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.AnnualReductionRate.Size()
		i -= size
		if _, err := m.AnnualReductionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.InitialAnnualMintAmount.Size()
		i -= size
		if _, err := m.InitialAnnualMintAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MintDenom) > 0 {
		i -= len(m.MintDenom)
		copy(dAtA[i:], m.MintDenom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.MintDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MintDenom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.InitialAnnualMintAmount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.AnnualReductionRate.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.BlockTimeSeconds != 0 {
		n += 1 + sovGenesis(uint64(m.BlockTimeSeconds))
	}
	l = m.MaxSupply.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.CommunityPoolRate.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.StakingRewardsRate.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialAnnualMintAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialAnnualMintAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnualReductionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AnnualReductionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTimeSeconds", wireType)
			}
			m.BlockTimeSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTimeSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityPoolRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommunityPoolRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingRewardsRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakingRewardsRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
