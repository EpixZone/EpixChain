// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: topholders/v1/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryTopHoldersRequest is the request type for the Query/TopHolders RPC method.
type QueryTopHoldersRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTopHoldersRequest) Reset()         { *m = QueryTopHoldersRequest{} }
func (m *QueryTopHoldersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTopHoldersRequest) ProtoMessage()    {}
func (*QueryTopHoldersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e29d67fa5bcc691e, []int{0}
}
func (m *QueryTopHoldersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopHoldersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopHoldersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopHoldersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopHoldersRequest.Merge(m, src)
}
func (m *QueryTopHoldersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopHoldersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopHoldersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopHoldersRequest proto.InternalMessageInfo

func (m *QueryTopHoldersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTopHoldersResponse is the response type for the Query/TopHolders RPC method.
type QueryTopHoldersResponse struct {
	// holders contains the list of top token holders
	Holders []HolderInfo `protobuf:"bytes,1,rep,name=holders,proto3" json:"holders"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// last_updated is the timestamp when the data was last updated
	LastUpdated int64 `protobuf:"varint,3,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// block_height is the block height when the data was last updated
	BlockHeight int64 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// total_count is the total number of holders in the cache
	TotalCount uint32 `protobuf:"varint,5,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (m *QueryTopHoldersResponse) Reset()         { *m = QueryTopHoldersResponse{} }
func (m *QueryTopHoldersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTopHoldersResponse) ProtoMessage()    {}
func (*QueryTopHoldersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e29d67fa5bcc691e, []int{1}
}
func (m *QueryTopHoldersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopHoldersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopHoldersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopHoldersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopHoldersResponse.Merge(m, src)
}
func (m *QueryTopHoldersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopHoldersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopHoldersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopHoldersResponse proto.InternalMessageInfo

func (m *QueryTopHoldersResponse) GetHolders() []HolderInfo {
	if m != nil {
		return m.Holders
	}
	return nil
}

func (m *QueryTopHoldersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryTopHoldersResponse) GetLastUpdated() int64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

func (m *QueryTopHoldersResponse) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *QueryTopHoldersResponse) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

// QueryCacheStatusRequest is the request type for the Query/CacheStatus RPC method.
type QueryCacheStatusRequest struct {
}

func (m *QueryCacheStatusRequest) Reset()         { *m = QueryCacheStatusRequest{} }
func (m *QueryCacheStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCacheStatusRequest) ProtoMessage()    {}
func (*QueryCacheStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e29d67fa5bcc691e, []int{2}
}
func (m *QueryCacheStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCacheStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCacheStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCacheStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCacheStatusRequest.Merge(m, src)
}
func (m *QueryCacheStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCacheStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCacheStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCacheStatusRequest proto.InternalMessageInfo

// QueryCacheStatusResponse is the response type for the Query/CacheStatus RPC method.
type QueryCacheStatusResponse struct {
	// last_updated is the timestamp when the cache was last updated
	LastUpdated int64 `protobuf:"varint,1,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// block_height is the block height when the cache was last updated
	BlockHeight int64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// total_holders is the total number of holders in the cache
	TotalHolders uint32 `protobuf:"varint,3,opt,name=total_holders,json=totalHolders,proto3" json:"total_holders,omitempty"`
	// is_updating indicates if a cache update is currently in progress
	IsUpdating bool `protobuf:"varint,4,opt,name=is_updating,json=isUpdating,proto3" json:"is_updating,omitempty"`
}

func (m *QueryCacheStatusResponse) Reset()         { *m = QueryCacheStatusResponse{} }
func (m *QueryCacheStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCacheStatusResponse) ProtoMessage()    {}
func (*QueryCacheStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e29d67fa5bcc691e, []int{3}
}
func (m *QueryCacheStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCacheStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCacheStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCacheStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCacheStatusResponse.Merge(m, src)
}
func (m *QueryCacheStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCacheStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCacheStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCacheStatusResponse proto.InternalMessageInfo

func (m *QueryCacheStatusResponse) GetLastUpdated() int64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

func (m *QueryCacheStatusResponse) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *QueryCacheStatusResponse) GetTotalHolders() uint32 {
	if m != nil {
		return m.TotalHolders
	}
	return 0
}

func (m *QueryCacheStatusResponse) GetIsUpdating() bool {
	if m != nil {
		return m.IsUpdating
	}
	return false
}

// HolderInfo represents information about a token holder
type HolderInfo struct {
	// address is the account address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// liquid_balance is the liquid token balance
	LiquidBalance cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=liquid_balance,json=liquidBalance,proto3,customtype=cosmossdk.io/math.Int" json:"liquid_balance"`
	// bonded_balance is the bonded/delegated token balance
	BondedBalance cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=bonded_balance,json=bondedBalance,proto3,customtype=cosmossdk.io/math.Int" json:"bonded_balance"`
	// unbonding_balance is the unbonding token balance
	UnbondingBalance cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=unbonding_balance,json=unbondingBalance,proto3,customtype=cosmossdk.io/math.Int" json:"unbonding_balance"`
	// total_balance is the total token balance (liquid + bonded + unbonding)
	TotalBalance cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=total_balance,json=totalBalance,proto3,customtype=cosmossdk.io/math.Int" json:"total_balance"`
	// rank is the holder's rank by total balance
	Rank uint32 `protobuf:"varint,6,opt,name=rank,proto3" json:"rank,omitempty"`
	// module_tag is an optional tag for module addresses
	ModuleTag string `protobuf:"bytes,7,opt,name=module_tag,json=moduleTag,proto3" json:"module_tag,omitempty"`
}

func (m *HolderInfo) Reset()         { *m = HolderInfo{} }
func (m *HolderInfo) String() string { return proto.CompactTextString(m) }
func (*HolderInfo) ProtoMessage()    {}
func (*HolderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e29d67fa5bcc691e, []int{4}
}
func (m *HolderInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HolderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HolderInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HolderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HolderInfo.Merge(m, src)
}
func (m *HolderInfo) XXX_Size() int {
	return m.Size()
}
func (m *HolderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HolderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HolderInfo proto.InternalMessageInfo

func (m *HolderInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *HolderInfo) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *HolderInfo) GetModuleTag() string {
	if m != nil {
		return m.ModuleTag
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryTopHoldersRequest)(nil), "topholders.v1.QueryTopHoldersRequest")
	proto.RegisterType((*QueryTopHoldersResponse)(nil), "topholders.v1.QueryTopHoldersResponse")
	proto.RegisterType((*QueryCacheStatusRequest)(nil), "topholders.v1.QueryCacheStatusRequest")
	proto.RegisterType((*QueryCacheStatusResponse)(nil), "topholders.v1.QueryCacheStatusResponse")
	proto.RegisterType((*HolderInfo)(nil), "topholders.v1.HolderInfo")
}

func init() { proto.RegisterFile("topholders/v1/query.proto", fileDescriptor_e29d67fa5bcc691e) }

var fileDescriptor_e29d67fa5bcc691e = []byte{
	// 657 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x3d, 0x6f, 0xd3, 0x40,
	0x18, 0x8e, 0x93, 0xb4, 0xa5, 0x6f, 0x1a, 0x04, 0x27, 0x3e, 0xdc, 0xd0, 0xa6, 0xc1, 0x15, 0x6d,
	0xc4, 0x60, 0x2b, 0x65, 0x62, 0x4d, 0x11, 0xb4, 0x4c, 0x60, 0xda, 0x85, 0x25, 0x9c, 0xed, 0xc3,
	0x3e, 0xd5, 0xb9, 0x73, 0x73, 0xe7, 0x88, 0x4e, 0x48, 0xc0, 0x8c, 0x90, 0xf8, 0x0f, 0xfc, 0x96,
	0x8e, 0x95, 0x58, 0x10, 0x43, 0x85, 0x5a, 0xfe, 0x02, 0x3b, 0xf2, 0x9d, 0xdd, 0xa4, 0x4d, 0xa5,
	0x64, 0x3b, 0x3f, 0x7e, 0xde, 0xe7, 0x7d, 0xde, 0x8f, 0x3b, 0x58, 0x96, 0x3c, 0x89, 0x78, 0x1c,
	0x90, 0x81, 0x70, 0x86, 0x1d, 0xe7, 0x30, 0x25, 0x83, 0x23, 0x3b, 0x19, 0x70, 0xc9, 0x51, 0x7d,
	0xf4, 0xcb, 0x1e, 0x76, 0x1a, 0x2b, 0x21, 0xe7, 0x61, 0x4c, 0x1c, 0x9c, 0x50, 0x07, 0x33, 0xc6,
	0x25, 0x96, 0x94, 0x33, 0xa1, 0xc9, 0x8d, 0x3b, 0x21, 0x0f, 0xb9, 0x3a, 0x3a, 0xd9, 0x29, 0x47,
	0x1f, 0xfb, 0x5c, 0xf4, 0xb9, 0x70, 0x3c, 0x2c, 0x88, 0xd6, 0x76, 0x86, 0x1d, 0x8f, 0x48, 0xdc,
	0x71, 0x12, 0x1c, 0x52, 0xa6, 0x24, 0x34, 0xd7, 0x7a, 0x07, 0xf7, 0x5e, 0x67, 0x8c, 0x3d, 0x9e,
	0xec, 0xe8, 0xac, 0x2e, 0x39, 0x4c, 0x89, 0x90, 0xe8, 0x39, 0xc0, 0x88, 0x6d, 0x1a, 0x2d, 0xa3,
	0x5d, 0xdb, 0xda, 0xb0, 0xb5, 0xb4, 0x9d, 0x49, 0xdb, 0xda, 0x76, 0x2e, 0x6d, 0xbf, 0xc2, 0x21,
	0xc9, 0x63, 0xdd, 0xb1, 0x48, 0xeb, 0x4b, 0x19, 0xee, 0x4f, 0xa4, 0x10, 0x09, 0x67, 0x82, 0xa0,
	0xa7, 0xb0, 0x90, 0xd7, 0x6a, 0x1a, 0xad, 0x4a, 0xbb, 0xb6, 0xb5, 0x6c, 0x5f, 0x2a, 0xdf, 0xd6,
	0x01, 0xbb, 0xec, 0x3d, 0xef, 0x56, 0x8f, 0x4f, 0xd7, 0x4a, 0x6e, 0xc1, 0x47, 0x2f, 0x2e, 0xd9,
	0x2b, 0x2b, 0x7b, 0x9b, 0x53, 0xed, 0xe9, 0xbc, 0xe3, 0xfe, 0xd0, 0x43, 0x58, 0x8a, 0xb1, 0x90,
	0xbd, 0x34, 0x09, 0xb0, 0x24, 0x81, 0x59, 0x69, 0x19, 0xed, 0x8a, 0x5b, 0xcb, 0xb0, 0x7d, 0x0d,
	0x65, 0x14, 0x2f, 0xe6, 0xfe, 0x41, 0x2f, 0x22, 0x34, 0x8c, 0xa4, 0x59, 0xd5, 0x14, 0x85, 0xed,
	0x28, 0x08, 0xad, 0x41, 0x4d, 0x72, 0x89, 0xe3, 0x9e, 0xcf, 0x53, 0x26, 0xcd, 0xb9, 0x96, 0xd1,
	0xae, 0xbb, 0xa0, 0xa0, 0xed, 0x0c, 0xb1, 0x96, 0xf3, 0x2e, 0x6c, 0x63, 0x3f, 0x22, 0x6f, 0x24,
	0x96, 0x69, 0xd1, 0x69, 0xeb, 0x87, 0x01, 0xe6, 0xe4, 0xbf, 0xbc, 0x45, 0x57, 0xed, 0x19, 0xd3,
	0xed, 0x95, 0x27, 0xed, 0xad, 0x43, 0x5d, 0xdb, 0x2b, 0xda, 0x5d, 0x51, 0x06, 0x97, 0x14, 0x98,
	0x4f, 0x25, 0xab, 0x81, 0x0a, 0x9d, 0x88, 0xb2, 0x50, 0x55, 0x79, 0xc3, 0x05, 0x2a, 0xf6, 0x73,
	0xc4, 0xfa, 0x57, 0x06, 0x18, 0x4d, 0x04, 0x99, 0xb0, 0x80, 0x83, 0x60, 0x40, 0x84, 0x50, 0xae,
	0x16, 0xdd, 0xe2, 0x13, 0x3d, 0x83, 0x9b, 0x31, 0x3d, 0x4c, 0x69, 0xd0, 0xf3, 0x70, 0x8c, 0x99,
	0x4f, 0x94, 0xa7, 0xc5, 0xee, 0x6a, 0x36, 0xc3, 0xdf, 0xa7, 0x6b, 0x77, 0xf5, 0x9c, 0x44, 0x70,
	0x60, 0x53, 0xee, 0xf4, 0xb1, 0x8c, 0xec, 0x5d, 0x26, 0xdd, 0xba, 0x0e, 0xea, 0xea, 0x98, 0x4c,
	0xc5, 0xe3, 0x2c, 0x20, 0x23, 0x95, 0xca, 0x4c, 0x2a, 0x3a, 0xa8, 0x50, 0x79, 0x09, 0xb7, 0x53,
	0x96, 0x41, 0x94, 0x85, 0x17, 0x42, 0xd5, 0x59, 0x84, 0x6e, 0x5d, 0xc4, 0x15, 0x5a, 0xdd, 0xa2,
	0x8d, 0x85, 0xce, 0xdc, 0x2c, 0x3a, 0xba, 0xcb, 0x85, 0x06, 0x82, 0xea, 0x00, 0xb3, 0x03, 0x73,
	0x5e, 0x4d, 0x40, 0x9d, 0xd1, 0x2a, 0x40, 0x9f, 0x07, 0x69, 0x4c, 0x7a, 0x12, 0x87, 0xe6, 0x82,
	0x6a, 0xe6, 0xa2, 0x46, 0xf6, 0x70, 0xb8, 0xf5, 0xb5, 0x0c, 0x73, 0x6a, 0x41, 0xd0, 0x47, 0x80,
	0xd1, 0x35, 0x42, 0x8f, 0xae, 0xdc, 0x96, 0xeb, 0x6f, 0x72, 0x63, 0x63, 0x1a, 0x4d, 0xaf, 0x9a,
	0x65, 0x7d, 0xfa, 0xf9, 0xf7, 0x7b, 0x79, 0x05, 0x35, 0x9c, 0xcb, 0xcf, 0x93, 0xe4, 0x49, 0xb1,
	0x37, 0xe8, 0xb3, 0x01, 0xb5, 0xb1, 0x35, 0x45, 0xd7, 0x6a, 0x4f, 0xee, 0x78, 0x63, 0x73, 0x2a,
	0x2f, 0x37, 0xb1, 0xae, 0x4c, 0xac, 0xa2, 0x07, 0x57, 0x4c, 0xf8, 0x19, 0xb7, 0x27, 0x14, 0xb9,
	0xdb, 0x3d, 0x3e, 0x6b, 0x1a, 0x27, 0x67, 0x4d, 0xe3, 0xcf, 0x59, 0xd3, 0xf8, 0x76, 0xde, 0x2c,
	0x9d, 0x9c, 0x37, 0x4b, 0xbf, 0xce, 0x9b, 0xa5, 0xb7, 0xed, 0x90, 0xca, 0x28, 0xf5, 0x6c, 0x9f,
	0xf7, 0x9d, 0xfc, 0x19, 0x24, 0xc3, 0xbe, 0xf3, 0x61, 0x5c, 0x4d, 0x1e, 0x25, 0x44, 0x78, 0xf3,
	0xea, 0x01, 0x7c, 0xf2, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x91, 0xc7, 0x16, 0x1d, 0x8c, 0x05, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// TopHolders returns the top token holders
	TopHolders(ctx context.Context, in *QueryTopHoldersRequest, opts ...grpc.CallOption) (*QueryTopHoldersResponse, error)
	// CacheStatus returns the status of the cache
	CacheStatus(ctx context.Context, in *QueryCacheStatusRequest, opts ...grpc.CallOption) (*QueryCacheStatusResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) TopHolders(ctx context.Context, in *QueryTopHoldersRequest, opts ...grpc.CallOption) (*QueryTopHoldersResponse, error) {
	out := new(QueryTopHoldersResponse)
	err := c.cc.Invoke(ctx, "/topholders.v1.Query/TopHolders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CacheStatus(ctx context.Context, in *QueryCacheStatusRequest, opts ...grpc.CallOption) (*QueryCacheStatusResponse, error) {
	out := new(QueryCacheStatusResponse)
	err := c.cc.Invoke(ctx, "/topholders.v1.Query/CacheStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// TopHolders returns the top token holders
	TopHolders(context.Context, *QueryTopHoldersRequest) (*QueryTopHoldersResponse, error)
	// CacheStatus returns the status of the cache
	CacheStatus(context.Context, *QueryCacheStatusRequest) (*QueryCacheStatusResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) TopHolders(ctx context.Context, req *QueryTopHoldersRequest) (*QueryTopHoldersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopHolders not implemented")
}
func (*UnimplementedQueryServer) CacheStatus(ctx context.Context, req *QueryCacheStatusRequest) (*QueryCacheStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheStatus not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_TopHolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopHoldersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TopHolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topholders.v1.Query/TopHolders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TopHolders(ctx, req.(*QueryTopHoldersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CacheStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCacheStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CacheStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topholders.v1.Query/CacheStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CacheStatus(ctx, req.(*QueryCacheStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "topholders.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TopHolders",
			Handler:    _Query_TopHolders_Handler,
		},
		{
			MethodName: "CacheStatus",
			Handler:    _Query_CacheStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topholders/v1/query.proto",
}

func (m *QueryTopHoldersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopHoldersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopHoldersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopHoldersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopHoldersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopHoldersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x28
	}
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.LastUpdated != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LastUpdated))
		i--
		dAtA[i] = 0x18
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Holders) > 0 {
		for iNdEx := len(m.Holders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Holders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCacheStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCacheStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCacheStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCacheStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCacheStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCacheStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsUpdating {
		i--
		if m.IsUpdating {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.TotalHolders != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalHolders))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.LastUpdated != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LastUpdated))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HolderInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolderInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HolderInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModuleTag) > 0 {
		i -= len(m.ModuleTag)
		copy(dAtA[i:], m.ModuleTag)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ModuleTag)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Rank != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.TotalBalance.Size()
		i -= size
		if _, err := m.TotalBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.UnbondingBalance.Size()
		i -= size
		if _, err := m.UnbondingBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.BondedBalance.Size()
		i -= size
		if _, err := m.BondedBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.LiquidBalance.Size()
		i -= size
		if _, err := m.LiquidBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTopHoldersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTopHoldersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Holders) > 0 {
		for _, e := range m.Holders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LastUpdated != 0 {
		n += 1 + sovQuery(uint64(m.LastUpdated))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	if m.TotalCount != 0 {
		n += 1 + sovQuery(uint64(m.TotalCount))
	}
	return n
}

func (m *QueryCacheStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCacheStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastUpdated != 0 {
		n += 1 + sovQuery(uint64(m.LastUpdated))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	if m.TotalHolders != 0 {
		n += 1 + sovQuery(uint64(m.TotalHolders))
	}
	if m.IsUpdating {
		n += 2
	}
	return n
}

func (m *HolderInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.LiquidBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.BondedBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.UnbondingBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Rank != 0 {
		n += 1 + sovQuery(uint64(m.Rank))
	}
	l = len(m.ModuleTag)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTopHoldersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopHoldersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopHoldersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopHoldersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopHoldersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopHoldersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Holders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Holders = append(m.Holders, HolderInfo{})
			if err := m.Holders[len(m.Holders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			m.LastUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdated |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCacheStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCacheStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCacheStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCacheStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCacheStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCacheStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			m.LastUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdated |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalHolders", wireType)
			}
			m.TotalHolders = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalHolders |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUpdating", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUpdating = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolderInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondedBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BondedBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnbondingBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
